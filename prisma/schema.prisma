// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  student
  instructor
  admin
}

model User {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String       @unique
  password          String
  phone             String? 
  instructorTitle   String? 
  avatar            String? 
  role              Role         @default(student)
  isVerified        Boolean      @default(false)
  verificationToken String? 
  courses           Enrollment[] // Courses the user is enrolled in
  teaching          Course[]     @relation("InstructorCourses") // Courses the instructor is teaching
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  certifications     Certification[] // Certifications issued to the user
}

//category model
model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  description String?
  courses   Course[] // Courses under this category
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



// Course Model
model Course {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  imageUrl     String?
  categoryId String?   @db.ObjectId
  category     Category?   @relation(fields: [categoryId], references: [id])
  instructor   User?        @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId String       @db.ObjectId
  lessons      Lesson[] // Course have many  Lessons
  enrollments  Enrollment[] // Students enrolled in the course
  certifications Certification[] // Certifications issued for the course
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// Lesson Model (Videos, PDFs, Text Lessons)
model Lesson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String // Lesson text
  videoUrl  String? // Optional video URL (Cloudinary/Youtube)
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  position   Int      @unique // âœ… Lesson position (1, 2, 3, ...)
  duration    Int? // Duration in minutes
  courseId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enrollment Model (Tracks student-course relationship)
model Enrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  student   User?    @relation(fields: [studentId], references: [id])
 
  instructorId String? @db.ObjectId 
  studentId String   @db.ObjectId
  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId
  instructorName String? // Optional instructor name for easy access
  progress  Int      @default(0) // Progress in percentage
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedLessons String[] 
   
}
//certification model
model Certification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId
   certificateId  String   @unique
  certificateUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}