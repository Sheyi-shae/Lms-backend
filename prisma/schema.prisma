// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  student
  instructor
  admin
}

model User {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String           @unique
  password          String
  phone             String?
  instructorTitle   String?
  avatar            String?
  role              Role             @default(student)
  isVerified        Boolean          @default(false)
  verificationToken String?
  courses           Enrollment[]     // Courses the user is enrolled in
  teaching          Course[]         @relation("InstructorCourses") // Courses the instructor is teaching
  certifications    Certification[]  // Certifications issued to the user

   interests         String[]         @db.ObjectId   //  Array of category IDs (interests)
  selectedInterest  Boolean          @default(false) //  Flag for interest selection
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

// Category Model
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  courses     Course[]  // Courses under this category
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Course Model
model Course {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  imageUrl       String?
  categoryId     String?         @db.ObjectId
  category       Category?       @relation(fields: [categoryId], references: [id], onDelete: Cascade) // Delete course if category is deleted
  instructor     User?           @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade) // Delete course if instructor is deleted
  instructorId   String          @db.ObjectId
  lessons        Lesson[]        // Course has many lessons
  enrollments    Enrollment[]    // Students enrolled in the course
  certifications Certification[] // Certifications issued for the course
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

// Lesson Model
model Lesson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  videoUrl  String?
  courseId  String   @db.ObjectId
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade) // Delete lesson if course is deleted
  position  Int    
  duration  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, position]) // âœ… Position is unique within a course
}

// Enrollment Model
model Enrollment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String   @db.ObjectId
  student        User?    @relation(fields: [studentId], references: [id], onDelete: Cascade) // Delete enrollment if student is deleted
  instructorId   String?  @db.ObjectId
  courseId       String   @db.ObjectId
  course         Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade) // Delete enrollment if course is deleted
  instructorName String?
  progress       Int      @default(0)
  completedLessons String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Certification Model
model Certification {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade) // Delete cert if user is deleted
  courseId       String   @db.ObjectId
  course         Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade) // Delete cert if course is deleted
  certificateId  String   @unique
  certificateUrl String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
